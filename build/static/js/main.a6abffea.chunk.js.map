{"version":3,"sources":["components/GlobalVals.tsx","components/ToDos.tsx","components/SingleNote.tsx","components/Notes.tsx","components/AddNote.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StoreContext","React","createContext","currectString","str","i","MAX_SINGLE_WORD","length","slice","dealWithLongString","tempArr","split","finalString","StoreProvider","children","store","useLocalStore","notes","lengh","addNote","note","unshift","tuggleDone","noteIndex","ToDoIndex","list","done","deleteNote","splice","notesInLine","window","innerWidth","columns","cardWidth","Provider","value","days","Time","year","month","day","hours","minuts","weekDay","fullDate","preatiefy","this","n","d","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getDay","ToDos","todo","listIndex","icon","button","underline","useContext","useState","btnColor","setBtnColor","description","currentText","setCurrentText","setTextColor","textStyle","setTextStyle","iconName","setIconName","btnRef","useRef","textRef","todoText","setTodoText","handleClick","useObserver","List","Item","Icon","name","ref","style","color","onClick","onMouseOver","onMouseOut","Content","textAlign","TextArea","as","className","e","onBlur","current","textDecoration","width","SingleNote","index","key","creationDate","lastUpdate","activeIndex","setActiveIndex","hover","setHover","inputVal","setInptVal","inptRef","colorTuggle","acordionAction","titleProps","console","log","Number","addTask","TaskToAdd","currentTime","push","inputRef","backgroundColorStyle","Card","centered","backgroundColor","Header","size","floated","Button","circular","onMouseEnter","onMouseLeave","Input","fluid","action","onChange","placeholder","Divider","Accordion","Title","active","map","Notes","onresize","carWidth","Container","Grid","Column","toString","AddNote","setInputVal","input","time","target","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6abffea.chunk.js","sourcesContent":["import  {useLocalStore} from 'mobx-react'\r\nimport React from 'react';\r\n\r\n\r\n/*\r\nconstant varivables:\r\n*/\r\nconst MAX_NOTES:number = 10;\r\nexport const MAX_SINGLE_WORD:number = 20;\r\n\r\n\r\n\r\n\r\nexport const StoreContext:React.Context<any> = React.createContext(null);\r\n\r\n\r\n\r\nexport const currectString = (str:string):string=>{\r\n  let i:number = MAX_SINGLE_WORD -1;\r\n  while(i < str.length){\r\n      str = str.slice(0,i+1)+'\\n' + str.slice(i+1,str.length);\r\n      i += MAX_SINGLE_WORD+2;\r\n  }\r\n  return str;\r\n}\r\n\r\nexport const dealWithLongString = (str:string):string=>{\r\n  let tempArr:string[]= str.split(' ');\r\n  let finalString:string = '';\r\n  for(let i:number = 0;i< tempArr.length;i++){\r\n      if(tempArr[i].length > MAX_SINGLE_WORD){\r\n          tempArr[i] = currectString(tempArr[i]);\r\n      }\r\n      finalString += tempArr[i]+' ';\r\n  }\r\n  return finalString;\r\n\r\n}\r\n\r\n\r\nexport const StoreProvider:React.FC = ({children})=>{\r\n    const store:Record<string, any> = useLocalStore(()=>({\r\n      notes:[],\r\n      get numberOfNotes():number{\r\n        return store.notes.lengh;\r\n      },\r\n      addNote: (note:Note):void=>{\r\n        if(store.notes.length < MAX_NOTES){\r\n          store.notes.unshift(note);\r\n        }else{\r\n          \r\n        }\r\n      },\r\n      tuggleDone: (noteIndex:number,ToDoIndex:number):void=>{\r\n        store.notes[noteIndex].list[ToDoIndex].done = !store.notes[noteIndex].list[ToDoIndex].done;\r\n      },\r\n      deleteNote:(noteIndex:number):void=>{\r\n        store.notes.splice(noteIndex,1);\r\n      },\r\n      notesInLine:window.innerWidth < 900?1:2,\r\n      columns:window.innerWidth > 900?2:1,\r\n      cardWidth:window.innerWidth > 900?window.innerWidth*0.3:window.innerWidth*0.9,\r\n    }));\r\n\r\n\r\n  \r\n    return(\r\n      <StoreContext.Provider value={store}>\r\n        {children}\r\n      </StoreContext.Provider>\r\n    )\r\n  \r\n  }\r\n\r\nexport const days:string[] = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\r\n  \r\nexport class Time{\r\n    year:number;\r\n    month:number;\r\n    day:number;\r\n    hours: number;\r\n    minuts:number;\r\n    weekDay:string;\r\n    fullDate: string;\r\n    preatiefy: Function;\r\n    constructor(){\r\n      this.preatiefy= (n:number):string=>{\r\n        if(n <10){\r\n          return `0${n}`;\r\n        }else{\r\n          return `${n}`;\r\n        }\r\n      }\r\n      let d = new Date;\r\n      this.year = d.getFullYear();\r\n      this.month = d.getMonth() + 1;\r\n      this.day = d.getDate();\r\n      this.hours = d.getHours();\r\n      this.minuts = d.getMinutes();\r\n      this.weekDay = days[d.getDay()];\r\n      this.fullDate = `${this.weekDay}, ${this.preatiefy(this.day)}/${this.preatiefy(this.month)}/${this.year}, ${this.preatiefy(this.hours)}:${this.preatiefy(this.minuts)}`;\r\n    }\r\n  \r\n  }\r\n\r\n  export interface ToDo{\r\n    done:boolean;\r\n    description:string;\r\n  }\r\n  export interface Note{\r\n    name:string;\r\n    list: ToDo[];\r\n    creationDate:Time;\r\n    lastUpdate: Time;\r\n  }","import React, { useState } from 'react'\r\nimport {Note,ToDo} from './GlobalVals'\r\nimport {StoreContext,MAX_SINGLE_WORD,currectString,dealWithLongString} from './GlobalVals'\r\nimport { useObserver } from 'mobx-react';\r\nimport {Button,TextArea,List, Container, Segment, Input} from 'semantic-ui-react'\r\n\r\nimport './ToDo.css'\r\ninterface Props{\r\n    todo:ToDo;\r\n    listIndex:number;\r\n    noteIndex:number;\r\n    key:string;\r\n}\r\n\r\nconst ToDos:React.FC<Props> = ({todo,listIndex,noteIndex})=>{\r\n    const icon:any[] = ['check circle outline','circle outline'];\r\n    const button:any[] = ['green','grey'];\r\n    const underline:any[] = ['line-through','none'];\r\n    const store = React.useContext(StoreContext);\r\n    const [btnColor,setBtnColor] = useState(store.notes[noteIndex].list[listIndex].done?button[0]:button[1]);\r\n    const [currentText,setCurrentText] = useState(todo.description)\r\n    const [textColor,setTextColor] = useState('grey');\r\n    const [textStyle,setTextStyle] = useState(todo.done?underline[0]:underline[1])\r\n    const [iconName,setIconName] = useState(todo.done?icon[0]:icon[1]);\r\n    const btnRef:any = React.useRef();\r\n    const textRef:any = React.useRef();\r\n    const [todoText,setTodoText] = useState('p');\r\n\r\n\r\n\r\n    const handleClick = ():void=>{\r\n        if(todoText === ''){\r\n            return\r\n        }\r\n        store.notes[noteIndex].list[listIndex].done= !store.notes[noteIndex].list[listIndex].done;\r\n        \r\n        if(store.notes[noteIndex].list[listIndex].done){\r\n            setBtnColor('green');\r\n            setTextStyle('line-through')\r\n            setIconName(icon[0]);\r\n        }else{\r\n            setBtnColor('grey');\r\n            setTextStyle('none')\r\n            setIconName(icon[1]);\r\n        }\r\n    }\r\n\r\n\r\n    return useObserver(()=>(\r\n        <List.Item >\r\n        \r\n            \r\n                <List.Icon\r\n                name= {iconName}\r\n                ref={btnRef} \r\n                style={{color:btnColor}}\r\n                onClick={handleClick}\r\n                onMouseOver={()=>{setTextColor('black')}}\r\n                onMouseOut={()=>{setTextColor('grey')}}                \r\n                >\r\n                </List.Icon>\r\n                <List.Content textAlign='left'>\r\n                    <TextArea\r\n                        \r\n                        ref={textRef}\r\n                        as={todoText} \r\n                        className='textPart'\r\n                        onClick={(e:Event)=>{\r\n                            setTodoText('')\r\n                            setIconName(icon[1]);\r\n                            setBtnColor(button[1]);\r\n                            setTextStyle(underline[1])\r\n                            \r\n                        }}  \r\n                        onBlur={()=>{\r\n                            if(textRef.current.ref.current.value !== '' &&\r\n                             textRef.current.ref.current.value !== currentText){\r\n\r\n                                store.notes[noteIndex].list[listIndex].description = dealWithLongString(textRef.current.ref.current.value);\r\n                                setCurrentText(store.notes[noteIndex].list[listIndex].description);\r\n                                store.notes[noteIndex].list[listIndex].done = false;                                \r\n                            }\r\n                            else if(store.notes[noteIndex].list[listIndex].done){\r\n                                setIconName(icon[0]);\r\n                                setBtnColor(button[0]);\r\n                                setTextStyle(underline[0])\r\n                            }\r\n                            setTodoText('p')\r\n                            \r\n                        }}\r\n                        style={{\r\n                            textDecoration:textStyle,\r\n                            width:window.innerWidth*0.2\r\n                        }}>\r\n                            {todo.description}\r\n                    </TextArea>\r\n                </List.Content>\r\n        </List.Item>\r\n    ))\r\n}\r\n\r\nexport default ToDos\r\n","import React, { useState ,ReactElement} from 'react'\r\nimport  {useObserver } from 'mobx-react'\r\nimport {Note,ToDo} from './GlobalVals'\r\nimport {StoreContext,Time,MAX_SINGLE_WORD,currectString,dealWithLongString} from './GlobalVals'\r\nimport { Grid, Segment,Divider,Button,Card,Input,Icon,Accordion,AccordionTitleProps,Header,List,ListContent } from 'semantic-ui-react'\r\nimport './SingleNote.css'\r\nimport ToDos from './ToDos'\r\n\r\ninterface Props{\r\n    note:Note;\r\n    index:number;\r\n    key:string;\r\n  }\r\n\r\nconst SingleNote:React.FC<Props> = ({note,index,key})=>{\r\n    const {name,creationDate,lastUpdate} = note;//destructuring the note prop\r\n    const store = React.useContext(StoreContext);\r\n    const [activeIndex,setActiveIndex] = useState(-1);\r\n    const [hover,setHover] = useState(false);//does the user hovers over the delete button\r\n    const [inputVal,setInptVal] = useState('');//the value in the input field\r\n    const btnRef:any = React.useRef();//a ref to the button that adds the other task\r\n    const inptRef:any = React.useRef();//a ref to the input that adds another task\r\n    const PREVIEW_LIMIT = 3;//maximum ninmber of task to see in preview screen\r\n    const DEFAULT_EMPTY_MESSAGE:string = 'Currnty no tasks';\r\n\r\n\r\n    const colorTuggle=():void=>{\r\n        setHover(!hover);\r\n    }\r\n    const getColor=()=>{\r\n        if(hover === true){\r\n            return 'red';\r\n        }else{\r\n            return 'grey';\r\n        }\r\n    }\r\n\r\n    const acordionAction = (e:React.MouseEvent<HTMLDivElement, MouseEvent>,titleProps:AccordionTitleProps):void=>{\r\n        console.log(e);\r\n        console.log(titleProps);\r\n        setActiveIndex(titleProps.index === activeIndex?-1: Number(titleProps.index))\r\n    }\r\n\r\n    /*\r\n    mission for to morrow:\r\n    to finish wrrghting the function that adds tasks - remembeer her main part should be in global!!\r\n    \r\n    */\r\n    const addTask = ():void=>{\r\n        if(inputVal !== ''){\r\n            let TaskToAdd:string = dealWithLongString(inputVal);\r\n            let currentTime = new Time;\r\n            store.notes[index].lastUpdate = currentTime;\r\n            store.notes[index].list.push({done:false,description:TaskToAdd});\r\n            inptRef.current.inputRef.current.value= '';\r\n            setInptVal('');\r\n        }\r\n\r\n    }\r\n    const listRend = ():ReactElement|JSX.Element[]=>{\r\n        if(note.list.length !== 0){\r\n            return note.list.map((todo:ToDo,i:number)=>{\r\n                return <ToDos todo={todo} listIndex={i} noteIndex={index} key={`todo${i}`}/>\r\n        })}else{\r\n            return <List.Item ><Header as='h6' color='grey'>{DEFAULT_EMPTY_MESSAGE}</Header></List.Item>\r\n        }\r\n    } \r\n\r\n    const backgroundColorStyle=():string=>{\r\n        if(index%2===0){\r\n            return 'rgb(255,255,255)'\r\n        }else{\r\n            return 'rgb(250,250,250)'\r\n        }\r\n    }\r\n    \r\n  \r\n    return useObserver(()=>(\r\n      \r\n      <div className='SingleNote'>\r\n        \r\n        <Card\r\n            centered\r\n            style={{\r\n                width:store.cardWidth,\r\n                backgroundColor:backgroundColorStyle()\r\n            }}         \r\n         >\r\n        <Card.Content>\r\n            <Card.Header size='small'>\r\n        \r\n             \r\n            <Header as='h6' color='grey' floated='left' textAlign='left'>\r\n                    Created At: {creationDate.fullDate} \r\n            </Header>\r\n                <Button \r\n                floated='right'\r\n                style={{backgroundColor:'transparent'}} \r\n                size='big' \r\n                circular\r\n                icon={{\r\n                    name:'delete',\r\n                    color:getColor()\r\n                }} \r\n                onMouseEnter={colorTuggle}\r\n                onMouseLeave={colorTuggle}\r\n                ref={btnRef}\r\n                onClick={()=>{store.deleteNote(index)}}\r\n                 />\r\n\r\n            <br/>\r\n            <Header textAlign='left' color='grey' as='h2' >\r\n                <Icon name='edit' />\r\n                {name}\r\n            </Header>\r\n            <Input\r\n                floated='right'\r\n                size='small'\r\n                fluid\r\n                action={{\r\n                    icon:'add',\r\n                    onClick:addTask,    \r\n                }}\r\n                onChange={()=>{\r\n                        setInptVal(inptRef.current.inputRef.current.value);\r\n                }}\r\n                style={{\r\n                    backgroundColor:backgroundColorStyle()\r\n                    \r\n                }} \r\n                placeholder='Add task'\r\n                ref={inptRef}\r\n            />\r\n            \r\n\r\n            </Card.Header>\r\n            <br/>\r\n            <Divider />\r\n\r\n            \r\n            <div className='singleNoteContent'>\r\n\r\n                <br/>\r\n                <Accordion className='acordion'>\r\n                <Accordion.Title \r\n                    className='acordion'\r\n                    active={activeIndex === 0}\r\n                    index={0}\r\n                    onClick={acordionAction}\r\n                    textAlign='left'\r\n                    floated='left'\r\n                    \r\n                >\r\n                    <Icon className='acordion' name='dropdown' />\r\n                    list:\r\n                </Accordion.Title>\r\n                <Accordion.Content className='acordion' active={activeIndex === 0}>\r\n                <List textAlign='left' floated='left'>\r\n                    {listRend()} \r\n                </List>\r\n                </Accordion.Content>\r\n                </Accordion>\r\n                {/* {note.list.map((todo:ToDo,i:number)=>{\r\n                    if(i < PREVIEW_LIMIT){\r\n                        return <ToDos todo={todo} listIndex={i} noteInex={index} key={`todo${i}`}/>\r\n                    }\r\n                })}   */}\r\n                <br/>\r\n\r\n                <Header as='h6' color='grey' floated='right' textAlign='right' className='lastUpdate'>\r\n                    last update: {lastUpdate.fullDate}\r\n                </Header>\r\n                \r\n            </div>\r\n        </Card.Content> \r\n        </Card>\r\n      </div>\r\n      \r\n    ))\r\n  }\r\n  export default SingleNote;\r\n","import React, { useState } from 'react';\r\nimport {StoreContext} from './GlobalVals'\r\nimport {Note} from './GlobalVals'\r\nimport {useObserver} from 'mobx-react'\r\nimport SingleNote from './SingleNote'\r\nimport { Grid, Container,Segment,Button,Card } from 'semantic-ui-react'\r\n\r\n\r\nconst Notes:React.FC = ()=>{\r\n    const store = React.useContext(StoreContext);\r\n    const [numOfColumns,setNumOfColumns] = useState<1|2|3>(window.innerWidth > 1300?3:window.innerWidth > 900?2:1)\r\n    // const []\r\n\r\n    window.onresize = ():void=>{\r\n        let width = window.innerWidth;\r\n            \r\n        if(width>900){\r\n            store.columns=2;\r\n            store.carWidth = window.innerWidth*0.3;\r\n\r\n        }else{\r\n            store.columns=1;\r\n            store.carWidth=window.innerWidth*0.9;\r\n        }\r\n      }\r\n\r\n  \r\n  \r\n    return useObserver(()=>\r\n    (\r\n        \r\n        <div>\r\n            <Container>\r\n            <Grid columns={store.columns}>\r\n            {store.notes.map((note:Note,i:number)=>{\r\n                return (<Grid.Column>\r\n                        \r\n                            <SingleNote note={note} index={i}  key={note.name + i.toString()}  />\r\n                        \r\n                    </Grid.Column>)\r\n            \r\n            })}\r\n            </Grid>\r\n            </Container>\r\n        </div>\r\n        \r\n    ));\r\n    \r\n   \r\n  }\r\nexport default Notes;\r\n","import React, {useState} from 'react'\r\nimport {StoreContext,Time,Note} from './GlobalVals'\r\nimport {Input} from 'semantic-ui-react';\r\nimport {useObserver} from 'mobx-react'\r\nimport './AddNote.css'\r\n\r\nconst AddNote:React.FC = ()=>{\r\n    const store = React.useContext(StoreContext);\r\n    const [inputVal,setInputVal] = useState('');\r\n    const input: React.RefObject<any> = React.useRef(null);\r\n  \r\n    const addNote = ():void=>{\r\n      const time = new Time;\r\n      input.current.inputRef.current.value = '';\r\n      store.addNote({name:inputVal, list:[],creationDate:time,lastUpdate:time})\r\n      setInputVal('');\r\n      \r\n  \r\n    }\r\n  \r\n    return  useObserver(()=>(\r\n     \r\n      <div>\r\n        <Input \r\n        action={{\r\n          className:'btn1',  \r\n          color:'blue',\r\n          size:'small',\r\n          icon:{name:'add',className:'icon1',color:'white'},\r\n          onClick:addNote\r\n        }}\r\n\r\n        ref={input}\r\n        placeholder='Add Note'\r\n        onChange={(e:React.ChangeEvent<HTMLInputElement>)=>{setInputVal(e.target.value)}}\r\n        />\r\n      </div>\r\n   \r\n    ))\r\n  }\r\n  export default AddNote;","import React from 'react';\nimport  { useObserver } from 'mobx-react'\nimport {HashRouter as Router,Switch,Route} from 'react-router-dom';\nimport './App.css';\nimport  {StoreContext,StoreProvider} from './components/GlobalVals';\nimport Notes from './components/Notes'\nimport AddNote from './components/AddNote'\n\n\nconst App:React.FC = () => {\n  const store = React.useContext(StoreContext);\n\n\n\n \n  return useObserver(()=>(\n    <StoreProvider>\n    <div className=\"App\">\n      <br/>\n\n          <AddNote/>\n          <br/>\n          <br/>\n          <Notes/>\n    </div>\n    </StoreProvider>\n  ));\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}